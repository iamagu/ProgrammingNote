垂直分表:将字段拆分到不同的表中
某种意义上也能避免“跨页”的问题（MySQL、MSSQL底层都是通过“数据页”来存储的，“跨页”问题可能会造成额外的性能开销）
如果是将已经开发的系统，则SQL语句要重写
拆分字段的操作建议在数据库设计阶段就做好。

垂直分库：基本的思路就是按照业务模块来划分出不同的数据库，而不是像早期一样将所有的数据表都放到同一个数据库中。
分库能突破IO、连接数、硬件资源的瓶颈。
跨库join，分布式事务等。

水平分表：就是将表中不同的数据行按照一定规律分布到不同的数据库表中（这些表保存在同一个数据库中），这样来降低单表数据量，优化查询性能。
能够降低单表的数据量，一定程度上可以缓解查询性能瓶颈。但本质上这些表还保存在同一个库中，所以库级别还是会有IO瓶颈。所以，一般不建议采用这种做法。

水平分库分表：将水平拆分出来的表保存在不同的数据库中。
效缓解单机和单库的性能瓶颈和压力，突破IO、连接数、硬件资源的瓶颈。
这也会带来一些复杂的技术问题和挑战（例如：跨分片的复杂查询，跨分片事务等）

跨库Join的几种解决思路
在拆分之前，系统中很多列表和详情页所需的数据是可以通过sql join来完成的。而拆分后，数据库可能是分布式在不同实例和不同的主机上，join将变得非常麻烦。而且基于架构规范，性能，安全性等方面考虑，一般是禁止跨库join的。那该怎么办呢？首先要考虑下垂直分库的设计问题，如果可以调整，那就优先调整。如果无法调整的情况，下面笔者将结合以往的实际经验，总结几种常见的解决思路，并分析其适用场景。
1 全局表：几乎不会做数据修改的表，在每个库中都有这样一个表
2 冗余字段：只适合需要冗余的字段很少的情况，且需要注意数据一致性问题（可通过数据库自身的触发器、应用层代码维护等手段）。
3 数据同步：定时同步
4 应用层组装：先查一个库，然后根据查出来的数据的某个字段去查另一个库。第二次查询时使用批量查询提高效率。
