

偏移量
消息偏移量、消息在文件中的物理偏移：消息偏移量是指消息在全局分区中的偏移量，消息在文件中的物理偏移是指在.log文件中消息的起始位置。


高可靠性保障
  Kafka高可靠性保障来源于它的复本策略。
  
1.文件存储机制
  Topic -> Partition -> Segment(.log .index)
  分区是实现横向扩展，可以提高并发度，分Segment更利于对消息的管理（比如：删除已经消费过的消息，避免只有一个文件情况下的文件无限扩张）。
  
  如何从Partition中通过Offset查找Message呢？
  根据Offset计算（.index文件是以上一个文件内最后一条Message的偏移量命名）Message所在的文件。
  说明：查找文件时将文件名排序，通过二分查找能快速的找到消息所在的文件。
  
  获取消息的起始读取偏移量后如何知道读取到哪里截止？
  消息都具有固定的物理结构，包括：offset（8 Bytes）、消息体的大小（4 Bytes）、crc32（4 Bytes）、magic（1 Byte）、attributes（1 Byte）、key length（4 Bytes）、key（K Bytes）、payload(N Bytes)等等字段，可以确定一条消息的大小，即读取到哪里截止。
  
复制原理和同步方式
  Leader负责跟踪Followers的滞后状态
  

高可用性
  复本机制
  Leader选举
    一个基本的原则就是，如果当前leader宕了，新的leader必须拥有原来leader commit的所有消息。

高可靠性
  一条消息只有被ISR中的所有Follower都从Leader复制过去才会被认为已提交。这样就避免了部分数据被写进了Leader，还没来得及被任何Follower复制就宕机了，而造成数据丢失。而对于Producer而言，它可以选择是否等待消息Commit，这可以通过request.required.acks来设置。这种机制确保了只要ISR中有一个或者以上的Follower，一条被commit的消息就不会丢失。
  

ISR(In-Sync Replicas)、OSR(Outof-Sync Replicas)、AR(Assigned Replicas)
  AR = ISR + OSR
  replica.lag.time.max.ms 最大延迟许毫秒数，当Follower滞后于Leader达到这个毫秒数，则会被路踢出ISR列表，被踢出的副本放入OSR中。
  
高可靠性配置
  topic的配置：replication.factor>=3,即副本数至少是3个；2<=min.insync.replicas<=replication.factor
  broker的配置：leader的选举条件unclean.leader.election.enable=false
  producer的配置：request.required.acks=-1(all)，producer.type=sync
说明：broker配置项是指允许从非ISR中选举Leader

Kafka高吞吐
  1 顺序写
  2 零拷贝
  3 分段存储（并行处理）
  4 批量
  5 压缩
  6 PageCache


负载均衡
  Kafka提供了一个 metadata API来管理broker之间的负载（对Kafka0.8.x而言，对于0.7.x主要靠zookeeper来实现负载均衡）。
